{
	// Place your ssd1306 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"SSD1306Struct_Funktion": {
		"scope": "zig",
		"prefix": "sf",
		"body": [
			"pub fn $1(self: Self, $2) !void {",
			"    $3try self.wt.writeAll(&[_]u8{",
			"        @bitCast(u8, ControlByte{}),$4",
			"    });",
			"}",
		],
		"description": "Function shortcut for SSD1306Struct"
	},
	"SSD1306Struct_Test": {
		"scope": "zig",
		"prefix": "st",
		"body": [
			"test \"$1\" {",
			"	// Arrange",
			"	var output = std.ArrayList(u8).init(std.testing.allocator);",
			"	defer output.deinit();",
			"	const expected_data = &[_]u8{ $3 };",
			"	// Act",
			"	const ssd1306 = SSD1306(output.writer());",
			"	try ssd1306.$2();",
			"	// Assert",
			"	try std.testing.expectEqualSlices(u8, output.items, expected_data);",
			"}",
			
		],
		"description": "Test shortcut for SSD1306"
	}
}